// Generated by CoffeeScript 1.8.0
(function() {
  var StudioAssetBaseUploader;

  StudioAssetBaseUploader = (function() {
    StudioAssetBaseUploader.prototype.hiddenField = function(name, value) {
      return "<input type=\"hidden\" name=\"" + name + "\" value=\"" + value + "\">";
    };

    function StudioAssetBaseUploader(options) {
      this.options = options;
      this.el = $(this.options.el);
      this._initializeUploader();
      this.listeners = [];
    }

    StudioAssetBaseUploader.prototype.rebindElements = function() {
      $(this.el.selector).replaceWith(this.el);
      $(this.uploaderOptions.previewsContainer).replaceWith(this.uploader.previewsContainer);
      $(this.uploaderOptions.previewsContainer).empty();
      if (this.options.hiddenFieldName != null) {
        return this.el.find("[name='" + this.options.hiddenFieldName + "']").remove();
      }
    };

    StudioAssetBaseUploader.prototype.addUploadListener = function(listener) {
      return this.listeners.push(listener);
    };

    StudioAssetBaseUploader.prototype.triggerUploader = function(err, file) {
      var listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener(err, file));
      }
      return _results;
    };

    StudioAssetBaseUploader.prototype._initializeUploader = function() {
      throw "Not implemented, make sure to call _createUploader in your implementation";
    };

    StudioAssetBaseUploader.prototype._createUploader = function(uploaderOptions) {
      this.uploaderOptions = uploaderOptions;
      this.uploaderOptions.fallback = function() {};
      this.uploaderOptions["headers"] = {
        "Accept": null,
        "Cache-Control": null,
        "X-Requested-With": null
      };
      this.uploader = new Dropzone(this.el.selector, uploaderOptions);
      this.uploader.on('uploadprogress', function(file, progress) {
        return $(file.previewElement).find('.dz-percent').html("" + (Math.min(Math.floor(progress), 99)) + "%");
      });
      this.uploader.on("success", (function(_this) {
        return function(file) {
          _this.triggerUploader(null, file);
          if (_this.options.hiddenFieldName != null) {
            _this.el.append(_this.hiddenField(_this.options.hiddenFieldName, file.assetId));
          }
          $(file.previewElement).find('.dz-percent').html("");
          $(file.previewElement).find('.dz-progress').empty();
          $(file.previewElement).find('.remove').remove();
          return $(document).trigger('upload:complete', file);
        };
      })(this));
      this.uploader.on("sending", (function(_this) {
        return function(file, xhr, formData) {
          $(document).trigger('upload:start', file);
          return _this._createAsset(function(err, data) {
            formData.append('signature', data.signature);
            formData.append('params', JSON.stringify(data.params));
            return file.assetId = data.asset_id;
          });
        };
      })(this));
      this.uploader.on("addedfile", (function(_this) {
        return function(file) {
          var fileName;
          fileName = file.name.length > 13 ? jQuery.trim(file.name).substring(0, 10).trim(_this) + "..." : file.name;
          return $(file.previewElement).find('.message__attachment__filename').html(fileName);
        };
      })(this));
      this.uploader.on("thumbnail", (function(_this) {
        return function(file) {
          $(file.previewElement).find('.message__attachment__icon').remove();
          return $(file.previewElement).find('.message__attachment__filename').remove();
        };
      })(this));
      return this.uploader;
    };

    StudioAssetBaseUploader.prototype._createAsset = function(cb) {
      return $.ajax({
        url: this.options.assetServiceLink.href,
        async: false,
        method: 'POST',
        data: this.options.assetServiceLink.payload,
        success: (function(_this) {
          return function(data, status, xhr) {
            return cb(void 0, {
              signature: data.transloadit.signature,
              params: data.transloadit.params,
              asset_id: data.asset.id
            });
          };
        })(this)
      });
    };

    return StudioAssetBaseUploader;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module["export"] = StudioAssetBaseUploader;
  } else {
    window.StudioAssetBaseUploader = StudioAssetBaseUploader;
  }

}).call(this);
